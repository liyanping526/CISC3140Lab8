;takes list as a input and returns reverse of a list if
(define(reverse ls)
	(cond ((null? ls)'())
		(else (append(reverse (cdr ls))(list (car ls))))))
  (reverse '(a b c));return (c b a)

;takes list as input and checks for palindrome
(define (palindrome ls)
  	(cond ((null? ls) 'true)
  	((equal? (reverse ls)ls) 'true)
  	 (else 'false)))
   (palindrome '( a b a)) ; return true
   (palindrome '(a b c)) ; return false

((lambda (x)(+ x x))(* 3 4)); return 24

; calculate function which takes in 2 parameters and then uses cond to check if each is an integer.  If either is not an integer, the user is told that both parameters must be integers and which parameter is not an integer.  If both parameters are integers then the sum of them is returned

(define (calculate a b)
  (cond
    [(not (integer? a)) "Both parameters must be integers, the first parameter is not an integer"]
    [(not (integer? b)) "Both parameters must be integers, the second parameter is not an integer"]
    [(+ a b)]))

     (calculate 8 7) ;return 15
     (calculate a 7) ;Error, the first parameter is not integer
     (calculate 7 "a");Error, the second parmeter is not integer